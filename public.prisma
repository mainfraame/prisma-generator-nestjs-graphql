generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native"]
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("VW_POSTGRES_URL")
  schemas  = ["auth", "email", "public", "registration_agreement", "masquerading"]
}

generator myGenerator {
  provider = "node ./dist/generator.js"
}

model Abilities {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique @db.VarChar(250)
  config              Json?
  accessRoleAbilities AccessRoleAbilities[]

  @@map("abilities")
  @@schema("public")
}

model AccessRole {
  accessRoleId         Int                    @id @default(autoincrement()) @map("access_role_id")
  accessRoleType       String                 @unique @map("access_role_type") @db.VarChar(50)
  name                 String                 @db.VarChar(250)
  isDeprecated         Boolean                @default(false) @map("is_deprecated")
  isRetired            Boolean                @default(false) @map("is_retired")
  accessRoleAbilities  AccessRoleAbilities[]
  userRolesAdvisor     UserRolesAdvisor[]
  userRolesEntity      UserRolesEntity[]
  userRolesParticipant UserRolesParticipant[]
  userRolesSponsor     UserRolesSponsor[]

  @@map("access_role")
  @@schema("public")
}

model AccessRoleAbilities {
  id           Int        @id @default(autoincrement())
  accessRoleId Int        @map("access_role_id")
  abilityId    Int        @map("ability_id")
  abilities    Abilities  @relation(fields: [abilityId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  accessRole   AccessRole @relation(fields: [accessRoleId], references: [accessRoleId], onDelete: NoAction, onUpdate: NoAction)

  @@unique([accessRoleId, abilityId])
  @@index([abilityId])
  @@map("access_role_abilities")
  @@schema("public")
}


model Address {
  addressId        Int              @id @default(autoincrement()) @map("address_id")
  addressType      AddressType?     @map("address_type")
  entityId         Int              @map("entity_id")
  entityTypeId     Int              @map("entity_type_id")
  address1         String?          @map("address_1") @db.VarChar(255)
  address2         String?          @map("address_2") @db.VarChar(255)
  city             String?          @db.VarChar(64)
  state            String?          @db.VarChar(64)
  zip              String?          @db.VarChar(20)
  country          String?          @db.VarChar(64)
  createdAt        DateTime         @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime         @map("updated_at") @db.Timestamptz(6)
  updatedBy        Json?            @map("updated_by")
  sharedEntityType SharedEntityType @relation(fields: [entityTypeId], references: [sharedEntityTypeId], onDelete: NoAction, onUpdate: NoAction)

  @@index([entityTypeId, entityId], map: "address_entity_id")
  @@map("address")
  @@schema("public")
}

model Advisor {
  advisorId                 Int                         @id @default(autoincrement()) @map("advisor_id")
  phone                     String?                     @db.VarChar(32)
  email                     String?                     @db.VarChar(512)
  companyName               String?                     @map("company_name") @db.VarChar(512)
  address1                  String?                     @map("address_1") @db.VarChar(255)
  address2                  String?                     @map("address_2") @db.VarChar(255)
  city                      String?                     @db.VarChar(255)
  state                     String?                     @db.VarChar(5)
  zip                       String?                     @db.VarChar(255)
  password                  String?                     @db.VarChar(512)
  applicationDate           DateTime?                   @map("application_date") @db.Timestamptz(6)
  activationDate            DateTime?                   @map("activation_date") @db.Timestamptz(6)
  createdAt                 DateTime                    @map("created_at") @db.Timestamptz(6)
  updatedAt                 DateTime                    @map("updated_at") @db.Timestamptz(6)
  advisorType               String?                     @map("advisor_type") @db.VarChar(16)
  firmId                    Int?                        @map("firm_id")
  homeOfficeName            String?                     @map("home_office_name") @db.VarChar(64)
  firstName                 String?                     @map("first_name") @db.VarChar(64)
  lastName                  String?                     @map("last_name") @db.VarChar(64)
  subDomain                 String?                     @map("sub_domain") @db.VarChar(64)
  logo                      String?                     @db.VarChar(64)
  clientSupportStrategy     String?                     @map("client_support_strategy") @db.VarChar(32)
  fee                       Decimal?                    @db.Decimal
  businessDescription       String?                     @map("business_description") @db.VarChar(9999)
  disclaimers               String?                     @db.VarChar(9999)
  companyEntityType         String?                     @map("company_entity_type") @db.VarChar(12)
  primaryContactPhone       String?                     @map("primary_contact_phone") @db.VarChar(32)
  primaryContactEmail       String?                     @map("primary_contact_email") @db.VarChar(512)
  secondaryContactName      String?                     @map("secondary_contact_name") @db.VarChar(512)
  secondaryContactPhone     String?                     @map("secondary_contact_phone") @db.VarChar(32)
  secondaryContactEmail     String?                     @map("secondary_contact_email") @db.VarChar(512)
  virtualAdvisor            Boolean?                    @map("virtual_advisor")
  companySize               String?                     @map("company_size") @db.VarChar(10)
  primaryContactName        String?                     @map("primary_contact_name") @db.VarChar(512)
  repNumber                 String?                     @map("rep_number") @db.VarChar(32)
  crdNumber                 String?                     @map("crd_number") @db.VarChar(32)
  status                    String?                     @db.VarChar(32)
  doingBusinessAs           String?                     @map("doing_business_as") @db.VarChar
  advisorActivation         AdvisorActivation[]
  advisorRegistrationStatus AdvisorRegistrationStatus[]
  advisorsponsorPlan        AdvisorSponsorPlan[]
  model                     Model[]
  userRolesAdvisor          UserRolesAdvisor[]

  @@map("advisor")
  @@schema("public")
}
model AdvisorActivation {
  advisorActivationId          Int      @id @default(autoincrement()) @map("advisor_activation_id")
  advisorId                    Int?     @map("advisor_id")
  completedPracticeInformation Boolean? @map("completed_practice_information")
  completedChooseFeatures      Boolean? @map("completed_choose_features")
  completedLearnVestwell       Boolean? @map("completed_learn_vestwell")
  createdAt                    DateTime @map("created_at") @db.Timestamptz(6)
  updatedAt                    DateTime @map("updated_at") @db.Timestamptz(6)
  advisor                      Advisor? @relation(fields: [advisorId], references: [advisorId], map: "advisor_activation_sponsor_id_fkey")

  @@index([advisorId])
  @@map("advisor_activation")
  @@schema("public")
}model AdvisorRegistrationStatus {
  advisorRegistrationStatusId Int       @id @default(autoincrement()) @map("advisor_registration_status_id")
  advisorId                   Int       @map("advisor_id")
  advisorUuid                 String    @map("advisor_uuid") @db.VarChar
  completedAt                 DateTime? @map("completed_at") @db.Timestamp(6)
  createdAt                   DateTime  @map("created_at") @db.Timestamp(6)
  advisor                     Advisor   @relation(fields: [advisorId], references: [advisorId], onDelete: NoAction, onUpdate: NoAction)

  @@index([advisorId])
  @@map("advisor_registration_status")
  @@schema("public")
}

model AdvisorSponsorPlan {
  advisorId     Int         @map("advisor_id")
  sponsorPlanId Int         @map("sponsor_plan_id")
  programId     Int?        @map("program_id")
  advisor       Advisor     @relation(fields: [advisorId], references: [advisorId], onDelete: NoAction, onUpdate: NoAction)
  program       Program?    @relation(fields: [programId], references: [programId], onDelete: NoAction, onUpdate: NoAction)
  sponsorPlan   SponsorPlan @relation(fields: [sponsorPlanId], references: [sponsorPlanId], onDelete: NoAction, onUpdate: NoAction)

  @@id([advisorId, sponsorPlanId])
  @@index([advisorId], map: "advisorsponsor_plan_advisorid_index")
  @@index([programId])
  @@index([sponsorPlanId], map: "advisorsponsorplan_sponsorplanid_index")
  @@map("advisorsponsor_plan")
  @@schema("public")
}




model AuthToken {
  authTokenId     Int           @id @default(autoincrement()) @map("auth_token_id")
  accessToken     String        @map("access_token") @db.VarChar(256)
  refreshToken    String?       @map("refresh_token") @db.VarChar(256)
  expiresAt       DateTime      @map("expires_at") @db.Timestamp(6)
  userId          Int           @map("user_id")
  partnerSystemId Int           @map("partner_system_id")
  createdAt       DateTime      @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime      @map("updated_at") @db.Timestamptz(6)
  partnerSystem   PartnerSystem @relation(fields: [partnerSystemId], references: [partnerSystemId], onDelete: NoAction, onUpdate: NoAction)
  user            User          @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)

  @@unique([userId, partnerSystemId])
  @@index([partnerSystemId])
  @@map("auth_token")
  @@schema("public")
}



model CensusRecords {
  censusRecordsId          Int         @id @default(autoincrement()) @map("census_records_id")
  sponsorPlanId            Int         @map("sponsor_plan_id")
  socialSecurityNumber     String      @map("social_security_number") @db.VarChar(11)
  lastName                 String      @map("last_name") @db.VarChar(32)
  firstName                String      @map("first_name") @db.VarChar(32)
  gender                   String?     @db.VarChar(6)
  dateOfBirth              DateTime?   @map("date_of_birth") @db.Date
  dateOfHire               DateTime?   @map("date_of_hire") @db.Date
  dateOfRehire             DateTime?   @map("date_of_rehire") @db.Date
  dateOfTermination        DateTime?   @map("date_of_termination") @db.Date
  streetAddress1           String?     @map("street_address_1") @db.VarChar(255)
  streetAddress2           String?     @map("street_address_2") @db.VarChar(255)
  city                     String?     @db.VarChar(255)
  state                    String?     @db.VarChar(3)
  zip                      String?     @db.VarChar(255)
  division                 String?     @db.VarChar(100)
  currentHours             Int?        @map("current_hours")
  maritalStatus            String?     @map("marital_status") @db.VarChar(20)
  payRate                  String?     @map("pay_rate") @db.VarChar(20)
  email                    String?     @db.VarChar(255)
  createdAt                DateTime    @map("created_at") @db.Timestamp(6)
  fullTime                 String?     @map("full_time") @db.VarChar(50)
  employmentType           String?     @map("employment_type") @db.VarChar(32)
  grossCompensation        String?     @map("gross_compensation") @db.VarChar(20)
  compensationType         String?     @map("compensation_type") @db.VarChar(20)
  isOriginalRecord         Boolean     @default(false) @map("is_original_record")
  priorYearHours           Int?        @map("prior_year_hours")
  dateOfTerminationStrRec  String?     @map("date_of_termination_str_rec") @db.VarChar(32)
  dateOfHireStrRec         String?     @map("date_of_hire_str_rec") @db.VarChar(32)
  dateOfRehireStrRec       String?     @map("date_of_rehire_str_rec") @db.VarChar(32)
  dateOfBirthStrRec        String?     @map("date_of_birth_str_rec") @db.VarChar(32)
  personalEmail            String?     @map("personal_email") @db.VarChar(256)
  guid                     String?     @db.VarChar(256)
  ein                      String?     @db.VarChar(256)
  yearsForVesting          Int?        @map("years_for_vesting")
  middleName               String?     @map("middle_name") @db.VarChar(30)
  contribution             Int?
  contributionType         String?     @map("contribution_type") @db.VarChar(1)
  rothContribution         Int?        @map("roth_contribution")
  rothContributionType     String?     @map("roth_contribution_tpe") @db.VarChar(1)
  afterTaxContribution     Int?        @map("after_tax_contribution")
  afterTaxContributionType String?     @map("after_tax_contribution_type") @db.VarChar(1)
  blockRoth                Boolean     @default(false) @map("block_roth")
  blockNonRoth             Boolean     @default(false) @map("block_non_roth")
  country                  String?     @db.VarChar(255)
  ucid                     String?     @db.VarChar(256)
  externalId               String?     @map("external_id") @db.VarChar(64)
  annualSalary             Decimal?    @map("annual_salary")
  sponsorPlan              SponsorPlan @relation(fields: [sponsorPlanId], references: [sponsorPlanId], onDelete: NoAction, onUpdate: NoAction)

  @@index([createdAt], map: "census_records_created_at")
  @@index([division], map: "census_records_division")
  @@index([socialSecurityNumber])
  @@index([sponsorPlanId, socialSecurityNumber, createdAt])
  @@index([firstName, lastName, sponsorPlanId], map: "censusrecords_firstname_lastname_sponsorplanid_index")
  @@map("census_records")
  @@schema("public")
}model EmailDefinition {
  definitionId Int               @id @default(autoincrement()) @map("id")
  name         String            @unique @db.VarChar(250)
  templateName String            @unique @map("template_name") @db.VarChar(250)
  config       Json
  version      String            @db.VarChar(25)
  enabled      Boolean
  whiteLabel   EmailWhiteLabel[]

  @@map("definition")
  @@schema("email")
}

model EmailWhiteLabel {
  whitelabelContentId Int                 @id @default(autoincrement()) @map("whitelabel_content_id")
  definitionId        Int                 @map("definition_id")
  emailContent        Json                @map("email_content")
  entity              WhitelabelEntities? @map("entity")
  entityId            Int?                @map("entity_id")
  definition          EmailDefinition     @relation(fields: [definitionId], references: [definitionId], onDelete: Cascade, onUpdate: NoAction)

  @@map("whitelabel_content")
  @@schema("email")
}

model FeatureToggleGlobal {
  featureToggleGlobalId Int      @id @default(autoincrement()) @map("feature_toggle_global_id")
  featureName           String?  @map("feature_name") @db.VarChar(512)
  isEnabled             Boolean? @map("is_enabled")
  featureDescription    String?  @map("feature_description")

  @@map("feature_toggle_global")
  @@schema("public")
}

model FeatureToggleLocal {
  featureToggleLocalId    Int      @id @default(autoincrement()) @map("feature_toggle_local_id")
  featureToggleGlobalId   Int?     @map("feature_toggle_global_id")
  isEnabled               Boolean? @map("is_enabled")
  isGlobalOverrideEnabled Boolean? @map("is_global_override_enabled")
  firmId                  Int?     @map("firm_id")
  advisorId               Int?     @map("advisor_id")
  sponsorId               Int?     @map("sponsor_id")
  sponsorPlanId           Int?     @map("sponsor_plan_id")
  participantId           Int?     @map("participant_id")

  @@map("feature_toggle_local")
  @@schema("public")
}model Firm {
  firmId                Int            @id @default(autoincrement()) @map("firm_id")
  allowOverride         Boolean?       @map("allow_override")
  companyName           String?        @map("company_name") @db.VarChar(512)
  homeOfficeName        String?        @map("home_office_name") @db.VarChar(64)
  subDomain             String?        @map("sub_domain") @db.VarChar(64)
  loginSubDomain        String?        @map("login_sub_domain") @db.VarChar(64)
  cssFileName           String?        @map("css_file_name") @db.VarChar(64)
  address1              String?        @map("address_1") @db.VarChar(255)
  address2              String?        @map("address_2") @db.VarChar(255)
  city                  String?        @db.VarChar(255)
  state                 String?        @db.VarChar(5)
  zip                   String?        @db.VarChar(255)
  logo                  String?        @db.VarChar(64)
  clientSupportStrategy String?        @map("client_support_strategy") @db.VarChar(32)
  fee                   Decimal?       @db.Decimal
  businessDescription   String?        @map("business_description") @db.VarChar(9999)
  disclaimers           String?        @db.VarChar(9999)
  applicationDate       DateTime?      @map("application_date") @db.Timestamptz(6)
  activationDate        DateTime?      @map("activation_date") @db.Timestamptz(6)
  createdAt             DateTime       @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime       @map("updated_at") @db.Timestamptz(6)
  cssFolder             String?        @map("css_folder") @db.VarChar(32)
  email                 String?        @db.VarChar(256)
  isActive              Boolean?       @map("is_active")
  firmType              String?        @map("firm_type") @db.VarChar(32)
  website               String?        @db.VarChar(128)
  mainPhoneNumber       String?        @map("main_phone_number") @db.VarChar(16)
  retirementPlanAssets  Float?         @map("retirement_plan_assets")
  advisorCount          Int?           @map("advisor_count")
  contactName           String?        @map("contact_name") @db.VarChar(50)
  migratedFromFirm1     Boolean?       @default(false) @map("migrated_from_firm_1")
  externalFirmId        String?        @map("external_firm_id") @db.VarChar(250)



  stateProgram          StateProgram[]


  @@map("firm")
  @@schema("public")
}

model Model {
  modelId              Int                @id @default(autoincrement()) @map("model_id")
  modelName            String             @map("model_name") @db.VarChar
  riskLevel            Int                @map("risk_level")
  autoRebalance        Boolean            @map("auto_rebalance")
  rebalanceFreq        Int                @map("rebalance_freq")
  fees                 Decimal            @db.Decimal
  drift                Int
  createdAt            DateTime?          @map("created_at") @db.Timestamptz(6)
  createdById          Int                @map("created_by_id")
  status               String             @db.VarChar
  updatedBy            String?            @map("updated_by") @db.VarChar
  benchmarkId          Int                @map("benchmark_id")
  viewName             String             @map("view_name") @db.VarChar
  programId            Int                @map("program_id")
  programType          String?            @map("program_type") @db.VarChar
  defaultInvest        Boolean?           @map("default_invest")
  yearsToRetireLow     Int?               @map("years_to_retire_low")
  yearsToRetireHigh    Int?               @map("years_to_retire_high")
  riskValue1Low        Int?               @map("risk_value_1_low")
  riskValue1High       Int?               @map("risk_value_1_high")
  programName          String?            @map("program_name") @db.VarChar
  factsheet            String?            @db.VarChar
  modelType            String             @map("model_type") @db.VarChar
  description          String?            @db.VarChar
  securityProviderId   Int                @default(1) @map("security_provider_id")
  benchmarkName        String?            @map("benchmark_name") @db.VarChar(255)
  benchmarkDescription String?            @map("benchmark_description") @db.VarChar
  inceptionDate        DateTime?          @map("inception_date") @db.Date

  advisor              Advisor            @relation(fields: [createdById], references: [advisorId], onDelete: NoAction, onUpdate: NoAction)
  program              Program            @relation(fields: [programId], references: [programId], onDelete: NoAction, onUpdate: NoAction, map: "progfk")





  sponsorPlanmodel     SponsorPlanModel[] @ignore


  @@index([benchmarkId])
  @@index([createdById])
  @@index([modelName], map: "model_modelname_index")
  @@index([programId])
  @@index([securityProviderId])
  @@index([status], map: "model_status_index")
  @@index([modelType], map: "model_type_idx")
  @@map("model")
  @@schema("public")
}
model Participant {
  participantId                   Int                             @id @default(autoincrement()) @map("participant_id")
  firstName                       String?                         @map("first_name") @db.VarChar(64)
  middleName                      String?                         @map("middle_name") @db.VarChar(64)
  lastName                        String?                         @map("last_name") @db.VarChar(64)
  socialSecurityNumber            String?                         @map("social_security_number") @db.VarChar(11)
  birthDate                       DateTime?                       @map("birth_date") @db.Date
  address1                        String?                         @map("address_1") @db.VarChar(255)
  address2                        String?                         @map("address_2") @db.VarChar(255)
  city                            String?                         @db.VarChar(255)
  state                           String?                         @db.VarChar(5)
  zip                             String?                         @db.VarChar(255)
  gender                          String?                         @db.VarChar(10)
  phone                           String?                         @db.VarChar(128)
  workEmail                       String?                         @map("work_email") @db.VarChar(128)
  savesForRetirement              String?                         @map("saves_for_retirement") @db.VarChar(32)
  contribution                    Int?
  riskValue                       Int?                            @map("risk_value")
  maritalStatus                   String?                         @map("marital_status") @db.VarChar(20)
  beneficiaryFirstName            String?                         @map("beneficiary_first_name") @db.VarChar(64)
  beneficiaryLastName             String?                         @map("beneficiary_last_name") @db.VarChar(64)
  beneficiarySocialSecurityNumber String?                         @map("beneficiary_social_security_number") @db.VarChar(11)
  beneficiaryRelationship         String?                         @map("beneficiary_relationship") @db.VarChar(10)
  beneficiaryPhone                String?                         @map("beneficiary_phone") @db.VarChar(15)
  beneficiaryEmail                String?                         @map("beneficiary_email") @db.VarChar(128)
  sendEmailUpdate                 Boolean?                        @map("send_email_update")
  password                        String?                         @db.VarChar(512)
  contributionType                String?                         @map("contribution_type") @db.VarChar(1)
  rothContribution                Int?                            @map("roth_contribution")
  rothContributionType            String?                         @map("roth_contribution_type") @db.VarChar(1)
  contributesToRoth               Boolean?                        @map("contributes_to_roth")
  activationDate                  DateTime?                       @map("activation_date") @db.Timestamptz(6)
  createdAt                       DateTime                        @map("created_at") @db.Timestamptz(6)
  updatedAt                       DateTime                        @map("updated_at") @db.Timestamptz(6)
  beneficiaryAddress1             String?                         @map("beneficiary_address_1") @db.VarChar(64)
  beneficiaryAddress2             String?                         @map("beneficiary_address_2") @db.VarChar(64)
  beneficiaryCity                 String?                         @map("beneficiary_city") @db.VarChar(255)
  beneficiaryState                String?                         @map("beneficiary_state") @db.VarChar(5)
  beneficiaryZip                  String?                         @map("beneficiary_zip") @db.VarChar(255)
  personalEmail                   String?                         @map("personal_email") @db.VarChar(128)
  yearsToRetire                   Int?                            @map("years_to_retire")
  deferralChanged                 Boolean?                        @default(false) @map("deferral_changed")
  autorebalance                   Boolean?                        @default(true)
  afterTaxContribution            Int?                            @map("after_tax_contribution")
  afterTaxContributionType        String?                         @map("after_tax_contribution_type") @db.VarChar(1)
  country                         String?                         @db.VarChar(255)

  beneficiaryBirthDate            DateTime?                       @map("beneficiary_birth_date") @db.Date
  isDeceased                      Boolean                         @default(false) @map("is_deceased")
  isDisabled                      Boolean                         @default(false) @map("is_disabled")
  nameUpdatedAt                   DateTime?                       @map("name_updated_at") @db.Timestamptz(6)
  addressUpdatedAt                DateTime?                       @map("address_updated_at") @db.Timestamptz(6)
  isVerified                      Boolean?                        @map("is_verified")
  updatedBy                       Json?                           @map("updated_by")
  externalId                      String?                         @map("external_id") @db.VarChar(64)
  stateIraAccountStatus           String?                         @map("state_ira_account_status") @db.VarChar(64)
  stateIraPerEmployerStatus       String?                         @map("state_ira_per_employer_status") @db.VarChar(64)
  stateIraCipStatus               String?                         @map("state_ira_cip_status") @db.VarChar(64)
  emailUpdatedAt                  DateTime?                       @map("email_updated_at") @db.Timestamptz(6)







  participantRegistrationStatus   ParticipantRegistrationStatus[]
  psa                             Psa[]

  userRolesParticipant            UserRolesParticipant[]

  @@index([firstName, lastName], map: "participant_firstname_lastname_index")
  @@index([socialSecurityNumber], map: "participant_ssn_index")
  @@map("participant")
  @@schema("public")
}

model ParticipantRegistrationStatus {
  registrationStatusId     Int         @id @default(autoincrement()) @map("registration_status_id")
  participantId            Int         @map("participant_id")
  registrationUuid         String      @unique @map("registration_uuid") @db.VarChar
  verificationAttemptsLeft Int         @map("verification_attempts_left")
  completedAt              DateTime?   @map("completed_at") @db.Timestamp(6)
  createdAt                DateTime    @map("created_at") @db.Timestamp(6)
  updatedAt                DateTime    @map("updated_at") @db.Timestamp(6)
  participant              Participant @relation(fields: [participantId], references: [participantId], onDelete: NoAction, onUpdate: NoAction)

  @@index([participantId, completedAt])
  @@index([participantId])
  @@map("participant_registration_status")
  @@schema("public")
}

model PartnerSystem {
  partnerSystemId      Int                    @id @default(autoincrement()) @map("partner_system_id")
  name                 String                 @unique @db.VarChar(255)
  authToken            AuthToken[]





  partnerSystemMapping PartnerSystemMapping[]
  recordkeeper         Recordkeeper[]
  stateProgram         StateProgram[]


  @@map("partner_system")
  @@schema("public")
}

model PartnerSystemMapping {
  partnerSystemMappingId Int              @id @default(autoincrement()) @map("partner_system_mapping_id")
  partnerSystemId        Int              @map("partner_system_id")
  externalId             String?          @map("external_id") @db.VarChar(255)
  internalId             Int              @map("internal_id")
  entityTypeId           Int              @map("entity_type_id")
  partnerSpecificData    Json             @map("partner_specific_data")
  createdAt              DateTime         @map("created_at") @db.Timestamp(6)
  updatedAt              DateTime         @map("updated_at") @db.Timestamp(6)
  sharedEntityType       SharedEntityType @relation(fields: [entityTypeId], references: [sharedEntityTypeId], onDelete: NoAction, onUpdate: NoAction)
  partnerSystem          PartnerSystem    @relation(fields: [partnerSystemId], references: [partnerSystemId], onDelete: NoAction, onUpdate: NoAction)
  user                   User             @relation(fields: [internalId], references: [userId], onDelete: NoAction, onUpdate: NoAction)

  @@unique([partnerSystemId, externalId, internalId, entityTypeId])
  @@index([entityTypeId])
  @@index([internalId, entityTypeId])
  @@index([partnerSystemId, entityTypeId, externalId])
  @@map("partner_system_mapping")
  @@schema("public")
}


model Payrollprovider {
  payrollProviderId   Int    @id @default(autoincrement()) @map("payroll_provider_id")
  payrollProviderName String @map("payroll_provider_name") @db.VarChar

  @@map("payrollprovider")
  @@schema("public")
}
model Program {
  programId               Int                  @id @default(autoincrement()) @map("program_id")
  type                    String               @db.VarChar
  name                    String?              @db.VarChar
  createdAt               DateTime             @map("created_at") @db.Timestamptz(6)
  programStatusId         Int                  @map("program_status_id")
  programStrategyStatusId Int                  @map("program_strategy_status_id")
  programSpecificData     Json?                @map("program_specific_data")
  updatedBy               Json?                @map("updated_by")
  updatedAt               DateTime?            @map("updated_at") @db.Timestamptz(6)




  advisorsponsorPlan      AdvisorSponsorPlan[]

  model                   Model[]






  @@index([programStatusId])
  @@index([programStrategyStatusId])
  @@map("program")
  @@schema("public")
}



model Psa {
  psaId                    Int         @id @default(autoincrement()) @map("psa_id")
  participantId            Int         @map("participant_id")
  sponsorPlanId            Int         @map("sponsor_plan_id")
  accountId                Int         @map("account_id")
  status                   String      @db.VarChar
  activatedAt              DateTime?   @map("activated_at") @db.Timestamptz(6)
  createdAt                DateTime    @map("created_at") @db.Timestamptz(6)
  isEligible               Boolean     @default(false) @map("is_eligible")
  eligibilityDate          DateTime?   @map("eligibility_date") @db.Timestamptz(6)
  optOut                   Boolean     @default(false) @map("opt_out")
  entryDate                DateTime?   @map("entry_date") @db.Timestamptz(6)
  paperlessNotices         Boolean?    @map("paperless_notices")
  blockRoth                Boolean     @default(false) @map("block_roth")
  blockNonRoth             Boolean     @default(false) @map("block_non_roth")
  yearsOfVesting           Int?        @map("years_of_vesting")
  partialPlanTermination   Boolean     @default(false) @map("partial_plan_termination")
  historicalYearsOfService Int         @default(0) @map("historical_years_of_service")

  participant              Participant @relation(fields: [participantId], references: [participantId], onDelete: Cascade, onUpdate: NoAction)
  sponsorPlan              SponsorPlan @relation(fields: [sponsorPlanId], references: [sponsorPlanId], onDelete: NoAction, onUpdate: NoAction)





  @@unique([participantId, sponsorPlanId, accountId], map: "psa_uq")
  @@index([accountId], map: "psa_accountid_index")
  @@index([participantId], map: "psa_participantid_index")
  @@index([participantId, sponsorPlanId], map: "psa_particpantid_sponsorplanid_index")
  @@index([sponsorPlanId], map: "psa_sponsorplanid_index")
  @@index([sponsorPlanId, status], map: "psa_sponsorplanid_status_index")
  @@map("psa")
  @@schema("public")
}
model Recordkeeper {
  recordkeeperId              Int                   @id @default(autoincrement()) @map("recordkeeper_id")
  partnerSystemId             Int                   @map("partner_system_id")
  platform                    RecordkeeperPlatform?
  isDefault                   Boolean               @default(false) @map("is_default")
  isAchSupported              Boolean               @default(true) @map("is_ach_supported")
  loanPaymentAllocationConfig String                @default("multi_bucket") @map("loan_payment_allocation_config") @db.VarChar(64)
  partnerSystem               PartnerSystem         @relation(fields: [partnerSystemId], references: [partnerSystemId], onDelete: NoAction, onUpdate: NoAction)

  sponsorPlan                 SponsorPlan[]

  @@index([partnerSystemId], map: "recordkeeper_partner_system")
  @@map("recordkeeper")
  @@schema("public")
}

model RegistrationAgreementEvents {
  eventId        Int       @id @default(autoincrement()) @map("event_id")
  userId         Int       @map("user_id")
  personaId      Int       @map("persona_id")
  eventTypeId    Int       @map("event_type_id")
  definitionId   Int       @map("definition_id")
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  eventTimestamp DateTime? @map("event_timestamp") @db.Timestamptz(6)

  @@index([eventId], map: "event_event_id_seq")
  @@map("event")
  @@schema("registration_agreement")
}

model SharedEntityType {
  sharedEntityTypeId     Int                      @id @default(autoincrement()) @map("shared_entity_type_id")
  name                   String                   @unique @db.VarChar(255)
  address                Address[]
  partnerSystemMapping   PartnerSystemMapping[]
  statefulSchemaTracking StatefulSchemaTracking[]

  @@map("shared_entity_type")
  @@schema("public")
}

model Sponsor {
  sponsorId                        Int                 @id @default(autoincrement()) @map("sponsor_id")
  primaryContactRole               String?             @map("primary_contact_role") @db.VarChar(32)
  primaryContactPhone              String?             @map("primary_contact_phone") @db.VarChar(32)
  primaryContactEmail              String?             @map("primary_contact_email") @db.VarChar(512)
  companyName                      String?             @map("company_name") @db.VarChar(512)
  companySize                      String?             @map("company_size") @db.VarChar(10)
  companyPhoneNumber               String?             @map("company_phone_number") @db.VarChar(32)
  companyInceptionDate             DateTime?           @map("company_inception_date") @db.Date
  address1                         String?             @map("address_1") @db.VarChar(255)
  address2                         String?             @map("address_2") @db.VarChar(255)
  city                             String?             @db.VarChar(255)
  state                            String?             @db.VarChar(5)
  zip                              String?             @db.VarChar(255)
  isConvert                        String?             @map("is_convert") @db.VarChar(10)
  isPayrollConnected               Boolean?            @map("is_payroll_connected")
  password                         String?             @db.VarChar(512)
  activationDate                   DateTime?           @map("activation_date") @db.Timestamptz(6)
  doingBusinessAs                  String?             @map("doing_business_as") @db.VarChar(512)
  employerIdentificationNumber     String?             @map("employer_identification_number") @db.VarChar(12)
  companyEntityType                String?             @map("company_entity_type") @db.VarChar(12)
  standardIndustrialClassification String?             @map("standard_industrial_classification") @db.VarChar(10)
  companyBillingEmail              String?             @map("company_billing_email") @db.VarChar(512)
  fiscalYearEnd                    String?             @map("fiscal_year_end") @db.VarChar(24)
  secondaryContactName             String?             @map("secondary_contact_name") @db.VarChar(512)
  secondaryContactRole             String?             @map("secondary_contact_role") @db.VarChar(32)
  secondaryContactPhone            String?             @map("secondary_contact_phone") @db.VarChar(32)
  secondaryContactEmail            String?             @map("secondary_contact_email") @db.VarChar(512)
  createdAt                        DateTime            @map("created_at") @db.Timestamptz(6)
  updatedAt                        DateTime            @map("updated_at") @db.Timestamptz(6)
  stateOfIncorporation             String?             @map("state_of_incorporation") @db.VarChar(5)
  identificationType               String?             @map("identification_type") @db.VarChar(128)
  identificationIssueState         String?             @map("identification_issue_state")
  identificationIssueCountry       String?             @map("identification_issue_country") @db.VarChar(64)
  identificationIssueDate          DateTime?           @map("identification_issue_date") @db.Date
  identificationExpirationDate     DateTime?           @map("identification_expiration_date") @db.Date
  citizenshipType                  String?             @map("citizenship_type") @db.VarChar(128)
  countryIfAlien                   String?             @map("country_if_alien") @db.VarChar(64)
  countryOfTaxResidence            String?             @map("country_of_tax_residence") @db.VarChar(64)
  foreignDignitaryCountry          String?             @map("foreign_dignitary_country") @db.VarChar(64)
  isForeignDignitary               Boolean?            @map("is_foreign_dignitary")
  identificationNumber             String?             @map("identification_number") @db.VarChar(128)
  hasFamilyMemberEmployees         Boolean?            @map("has_family_member_employees")
  otherBusinessesOwned             String?             @map("other_businesses_owned")
  hasOtherBusinesses               Boolean?            @map("has_other_businesses")
  controlGroupBusinesses           String?             @map("control_group_businesses")
  isPartOfControlGroup             Boolean?            @map("is_part_of_control_group")
  hasLeasedEmployees               Boolean?            @map("has_leased_employees")
  primaryContactTitle              String?             @map("primary_contact_title") @db.VarChar(128)
  hasHiddenPlanAgreements          Boolean?            @default(true) @map("has_hidden_plan_agreements")
  payrollProviderId                Int?                @map("payroll_provider_id")
  vestwellSalesContact             String?             @map("vestwell_sales_contact") @db.VarChar
  anticipatedAdvisor               String?             @map("anticipated_advisor") @db.VarChar
  anticipatedHomeOfficeAffiliation String?             @map("anticipated_home_office_affiliation") @db.VarChar
  anticipatedAdvisorGroup          String?             @map("anticipated_advisor_group") @db.VarChar
  dayToDayContactName              String?             @map("day_to_day_contact_name") @db.VarChar
  dayToDayContactNumber            String?             @map("day_to_day_contact_number") @db.VarChar
  dayToDayContactEmail             String?             @map("day_to_day_contact_email") @db.VarChar
  wiredAtWork                      Boolean?            @map("wired_at_work")
  estimatedAnnualContribution      Int?                @map("estimated_annual_contribution")
  newOnboarding                    Boolean?            @default(false) @map("new_onboarding")
  hqCountry                        String?             @map("hq_country") @db.VarChar(100)
  primaryContactFirstName          String?             @map("primary_contact_first_name") @db.VarChar(512)
  primaryContactLastName           String?             @map("primary_contact_last_name") @db.VarChar(512)



  sponsorActivation                SponsorActivation[]

  sponsorExemption                 SponsorExemption[]

  sponsorPlan                      SponsorPlan[]



  userRolesSponsor                 UserRolesSponsor[]

  @@index([companyName], map: "sponsor_companyname_index")
  @@index([payrollProviderId])
  @@map("sponsor")
  @@schema("public")
}

model SponsorActivation {
  sponsorActivationId         Int      @id @default(autoincrement()) @map("sponsor_activation_id")
  sponsorId                   Int?     @map("sponsor_id")
  completedCompanyInformation Boolean? @map("completed_company_information")
  completedDesignYourPlan     Boolean? @map("completed_design_your_plan")
  completedConnectPayroll     Boolean? @map("completed_connect_payroll")
  completedContractSigning    Boolean? @map("completed_contract_signing")
  completedAddEmployees       Boolean? @map("completed_add_employees")
  createdAt                   DateTime @map("created_at") @db.Timestamptz(6)
  updatedAt                   DateTime @map("updated_at") @db.Timestamptz(6)
  sponsor                     Sponsor? @relation(fields: [sponsorId], references: [sponsorId])

  @@index([sponsorId])
  @@map("sponsor_activation")
  @@schema("public")
}



model SponsorExemption {
  sponsorExemptionId        Int       @id @default(autoincrement()) @map("sponsor_exemption_id")
  exemptionConfirmationCode String    @unique @map("exemption_confirmation_code") @db.VarChar
  sponsorId                 Int?      @map("sponsor_id")
  reason                    String    @db.VarChar
  signatureName             String    @map("signature_name") @db.VarChar
  createdAt                 DateTime  @map("created_at") @db.Timestamptz(6)
  canceledAt                DateTime? @map("canceled_at") @db.Timestamptz(6)
  sponsor                   Sponsor?  @relation(fields: [sponsorId], references: [sponsorId], onDelete: NoAction, onUpdate: NoAction)

  @@map("sponsor_exemption")
  @@schema("public")
}

model SponsorPlan {
  sponsorPlanId                          Int                  @id @default(autoincrement()) @map("sponsor_plan_id")
  sponsorId                              Int?                 @map("sponsor_id")
  isSafeHarbor                           Boolean?             @map("is_safe_harbor")
  safeHarborStrategy                     String?              @map("safe_harbor_strategy") @db.VarChar(64)
  contributionFormula                    String?              @map("contribution_formula") @db.VarChar(9999)
  isProfitSharing                        Boolean?             @map("is_profit_sharing")
  profitSharingStrategy                  String?              @map("profit_sharing_strategy") @db.VarChar(32)
  customClassification1                  String?              @map("custom_classification_1") @db.VarChar(32)
  customClassification2                  String?              @map("custom_classification_2") @db.VarChar(32)
  customClassification3                  String?              @map("custom_classification_3") @db.VarChar(32)
  customClassification4                  String?              @map("custom_classification_4") @db.VarChar(32)
  customClassificationSeparate           Boolean?             @map("custom_classification_separate")
  rollOver                               Boolean?             @map("roll_over")
  allowLoans                             String?              @map("allow_loans") @db.VarChar(32)
  isActive                               Boolean?             @map("is_active")
  effectivePlanDate                      DateTime?            @map("effective_plan_date") @db.Date
  originalEffectivePlanDate              DateTime?            @map("original_effective_plan_date") @db.Date
  eligibilityOverrideStartDate           DateTime?            @map("eligibility_override_start_date") @db.Timestamptz(6)
  createdAt                              DateTime             @map("created_at") @db.Timestamptz(6)
  updatedAt                              DateTime             @map("updated_at") @db.Timestamptz(6)
  isEmployerMatching                     Boolean?             @map("is_employer_matching")
  planNumber                             String?              @map("plan_number") @db.VarChar(32)
  safeHarborEffectiveDate                DateTime?            @map("safe_harbor_effective_date") @db.Timestamptz(6)
  eligibilityType                        String?              @map("eligibility_type") @db.VarChar
  planParticipantEntryDate               DateTime?            @map("plan_participant_entry_date") @db.Timestamptz(6)
  nonSafeHarborEffectiveDate             DateTime?            @map("non_safe_harbor_effective_date") @db.Timestamptz(6)
  salaryRothDeferralEffectiveDate        DateTime?            @map("salary_roth_deferral_effective_date") @db.Timestamptz(6)
  isNonSafeHarborEmployerContr           Boolean?             @map("is_non_safe_harbor_employer_contr")
  isSalaryRothDeferral                   Boolean?             @map("is_salary_roth_deferral")
  profitSharingStartDate                 DateTime?            @map("profit_sharing_start_date") @db.Date
  allowEligibilityOverride               Boolean?             @map("allow_eligibility_override")
  nonSafeHarborContributionType          String?              @map("non_safe_harbor_contribution_type") @db.VarChar(64)
  contributionType                       String?              @map("contribution_type") @db.VarChar(64)
  participantEntryMethod                 String?              @map("participant_entry_method") @db.VarChar
  profitSharingEligibilityHours          Int?                 @default(120) @map("profit_sharing_eligibility_hours")
  profitSharingEligibilityType           String?              @map("profit_sharing_eligibility_type") @db.VarChar
  isConversion                           Boolean?             @map("is_conversion")
  isEmployerContribution                 Boolean?             @map("is_employer_contribution")
  planName                               String?              @map("plan_name")
  autoEnroll                             Boolean?             @map("auto_enroll")
  autoEnrollAmount                       Int?                 @map("auto_enroll_amount")
  planType                               String?              @map("plan_type") @db.VarChar
  startDate                              DateTime?            @map("start_date") @db.Timestamp(6)
  endDate                                DateTime?            @map("end_date") @db.Timestamp(6)
  externalSponsorPlanId                  String?              @map("external_sponsor_plan_id") @db.VarChar(32)
  investmentStructure                    String?              @map("investment_structure") @db.VarChar(15)
  priorProvider                          String?              @map("prior_provider") @db.VarChar
  priorTpa                               String?              @map("prior_tpa") @db.VarChar
  assetsAtPriorProvider                  Int?                 @map("assets_at_prior_provider")
  specialParticipationDate               DateTime?            @map("special_participation_date") @db.Date
  hourType                               String?              @map("hour_type") @db.VarChar(7)
  ageRequirement                         Int?                 @map("age_requirement")
  serviceRequirement                     String?              @map("service_requirement") @db.VarChar
  hoursRequirement                       Int?                 @map("hours_requirement")
  feesContainerId                        Int?                 @map("fees_container_id")
  planYear                               String?              @map("plan_year") @db.VarChar(12)
  adminStatus                            String?              @default("Onboarding") @map("admin_status") @db.VarChar(40)
  terminationDate                        DateTime?            @map("termination_date") @db.Timestamp(6)
  notes                                  String?              @db.VarChar
  autoEscalateAmount                     Int?                 @map("auto_escalate_amount")
  excludeLeasedEmployees                 Boolean              @default(false) @map("exclude_leased_employees")
  blackoutStartDate                      DateTime?            @map("blackout_start_date") @db.Date
  blackoutEndDate                        DateTime?            @map("blackout_end_date") @db.Date
  custodianAccountNumber                 String?              @map("custodian_account_number") @db.VarChar
  adoptionAgreementProvider              String?              @map("adoption_agreement_provider") @db.VarChar
  deferInDollars                         Boolean?             @map("defer_in_dollars")
  autoEscalate                           Boolean?             @default(false) @map("auto_escalate")
  autoEscalateCeiling                    Int?                 @map("auto_escalate_ceiling")
  autoEnrollEffectiveDate                DateTime?            @map("auto_enroll_effective_date") @db.Date
  recordkeeperId                         Int?                 @map("recordkeeper_id")
  allowPretaxContribution                Boolean?             @map("allow_pretax_contribution")
  allowAfterTaxContribution              Boolean?             @map("allow_after_tax_contribution")
  allowSafeHarborMatch                   Boolean?             @map("allow_safe_harbor_match")
  allowSafeHarborNonElective             Boolean?             @map("allow_safe_harbor_non_elective")
  allowQnecQmac                          Boolean?             @map("allow_qnec_qmac")
  liquidationDate                        DateTime?            @map("liquidation_date") @db.Date
  isHardshipDistributionAllowed          Boolean?             @map("is_hardship_distribution_allowed")
  isEarlyRetirementAllowed               Boolean?             @map("is_early_retirement_allowed")
  earlyRetirementAge                     Decimal?             @map("early_retirement_age") @db.Decimal
  isHardshipProofRequired                Boolean?             @map("is_hardship_proof_required")
  hasPriorLoans                          Boolean?             @default(false) @map("has_prior_loans")
  matchFrequency                         String?              @default("N/A - No Match") @map("match_frequency") @db.VarChar
  pendingAmendmentEffectiveDate          DateTime?            @map("pending_amendment_effective_date") @db.Date
  pendingAmendmentNotes                  String?              @map("pending_amendment_notes")
  csmId                                  Int?                 @map("csm_id")
  externalHardDollarBillingAccountNumber String?              @map("external_hard_dollar_billing_account_number") @db.VarChar(250)
  serviceLevel                           String?              @map("service_level") @db.VarChar(16)
  allowRollover                          String?              @map("allow_rollover") @db.VarChar
  relationshipManagerId                  Int?                 @map("relationship_manager_id")
  allowRothIraContribution               Boolean              @default(false) @map("allow_roth_ira_contribution")


  recordkeeper                           Recordkeeper?        @relation(fields: [recordkeeperId], references: [recordkeeperId], onDelete: NoAction, onUpdate: NoAction)

  sponsor                                Sponsor?             @relation(fields: [sponsorId], references: [sponsorId])

  advisorsponsorPlan                     AdvisorSponsorPlan[]























  psa                                    Psa[]



  sponsorPlanmodel                       SponsorPlanModel[]   @ignore










  CensusRecords CensusRecords[]

  @@index([csmId])
  @@index([feesContainerId])
  @@index([recordkeeperId], map: "sponsor_plan_recordkeeper")
  @@index([isActive], map: "sponsorplan_isactive_index")
  @@index([sponsorId], map: "sponsorplan_sponsorid_index")
  @@map("sponsor_plan")
  @@schema("public")
}




model SponsorPlanModel {
  sponsorPlanModelId Int         @id @default(autoincrement()) @map("sponsor_plan_model_id")
  modelId            Int         @map("model_id")
  sponsorPlanId      Int         @map("sponsor_plan_id")
  model              Model       @relation(fields: [modelId], references: [modelId], onDelete: NoAction, onUpdate: NoAction)
  sponsorPlan        SponsorPlan @relation(fields: [sponsorPlanId], references: [sponsorPlanId], onDelete: NoAction, onUpdate: NoAction)


  @@index([modelId])
  @@index([sponsorPlanId])
  @@map("sponsor_planmodel")
  @@schema("public")
}model StatefulSchemaTracking {
  statefulSchemaTrackingId Int                  @id @default(autoincrement()) @map("stateful_schema_tracking_id")
  statefulSchemaId         Int                  @map("stateful_schema_id")
  sharedEntityTypeId       Int                  @map("shared_entity_type_id")
  entityId                 Int                  @map("entity_id")
  state                    Json
  status                   StatefulSchemaStatus
  createdAt                DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                DateTime             @default(now()) @map("updated_at") @db.Timestamptz(6)
  updatedBy                Int                  @map("updated_by")
  sharedEntityType         SharedEntityType     @relation(fields: [sharedEntityTypeId], references: [sharedEntityTypeId], onDelete: NoAction, onUpdate: NoAction)

  user                     User                 @relation(fields: [updatedBy], references: [userId], onDelete: NoAction, onUpdate: NoAction)


  @@map("stateful_schema_tracking")
  @@schema("public")
}

model StateProgram {
  id                        Int           @id @default(autoincrement())
  partnerSystemId           Int           @map("partner_system_id")
  firmId                    Int           @map("firm_id")
  employerCode              String        @map("employer_code") @db.VarChar(64)
  employeeCode              String        @map("employee_code") @db.VarChar(64)
  employeeFundCode          String        @map("employee_fund_code") @db.VarChar(64)
  feeTableCode              String        @map("fee_table_code") @db.VarChar(64)
  regularCheckMailAddress   Json?         @map("regular_check_mail_address")
  overnightCheckMailAddress Json?         @map("overnight_check_mail_address")
  firm                      Firm          @relation(fields: [firmId], references: [firmId], onDelete: NoAction, onUpdate: NoAction)
  partnerSystem             PartnerSystem @relation(fields: [partnerSystemId], references: [partnerSystemId], onDelete: NoAction, onUpdate: NoAction)

  @@map("state_program")
  @@schema("public")
}



model User {
  userId                 Int                      @id @default(autoincrement()) @map("user_id")
  email                  String?                  @db.VarChar(512)
  password               String?                  @db.VarChar(512)
  createdAt              DateTime                 @map("created_at") @db.Timestamptz(6)
  updatedAt              DateTime                 @map("updated_at") @db.Timestamptz(6)
  pendingPasswordReset   Boolean?                 @default(false) @map("pending_password_reset")
  invalidPasswordCount   Int?                     @default(0) @map("invalid_password_count")
  isLocked               Boolean?                 @map("is_locked")
  isMfaEnabled           Boolean?                 @map("is_mfa_enabled")
  mfaSecret              String?                  @map("mfa_secret")
  partnerSystemMapping   PartnerSystemMapping[]
  authToken              AuthToken[]

  statefulSchemaTracking StatefulSchemaTracking[]
  userInvite             UserInvite[]
  userMfaAttempt         UserMfaAttempt[]
  userRolesAdvisor       UserRolesAdvisor[]
  userRolesEntity        UserRolesEntity[]

  userRolesParticipant   UserRolesParticipant[]
  userRolesSponsor       UserRolesSponsor[]
  userSession            UserSession?

  @@map("user")
  @@schema("public")
}

model MfaEntry {
  mfaEntryId      Int      @id @default(autoincrement()) @map("mfa_entry_id")
  mfaDefinitionId Int      @map("mfa_definition_id")
  userId          Int?     @map("user_id")
  entryType       String?  @map("entry_type") @db.VarChar(10)
  value           String?  @db.VarChar(256)
  isPrimary       Boolean? @map("is_primary")
  createdBy       Json?    @map("created_by")
  updatedBy       Json?    @map("updated_by")

  @@unique([userId, entryType])
  @@map("mfa_entry")
  @@schema("auth")
}

model MfaSetup {
  id        Int       @id @default(autoincrement()) @map("id")
  userId    Int       @unique @map("user_id")
  entryType String    @map("entry_type") @db.VarChar(10)
  value     String?   @db.VarChar(256)
  secret    String    @db.VarChar(256)
  createdAt DateTime? @map("created_at") @db.Timestamptz(6) @default(now())

  @@map("mfa_setup")
  @@schema("auth")
}

model UrlRedirect {
  urlRedirectId   Int      @id @default(autoincrement()) @map("url_redirect_id")
  hash            String   @unique @map("hash")
  postLoginPath   String   @map("post_login_path")
  postPersonaPath String   @map("post_persona_path")
  createdAt       DateTime @map("created_at") @db.Timestamptz(6)

  @@map("url_redirect")
  @@schema("public")
}

model UserInvite {
  userInviteId         Int       @id @default(autoincrement()) @map("user_invite_id")
  inviteCode           String    @unique @map("invite_code") @db.VarChar
  deliveryMethod       String    @map("delivery_method") @db.VarChar
  email                String?   @db.VarChar
  entityType           String    @map("entity_type") @db.VarChar
  entityId             Int       @map("entity_id")
  userId               Int?      @map("user_id")
  accessRoleIds        Int[]     @map("access_role_ids")
  verificationAttempts Int       @default(0) @map("verification_attempts")
  createdAt            DateTime  @map("created_at") @db.Timestamptz(6)
  expiresAt            DateTime  @map("expires_at") @db.Timestamptz(6)
  invalidatedAt        DateTime? @map("invalidated_at") @db.Timestamptz(6)
  user                 User?     @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)

  @@map("user_invite")
  @@schema("public")
}

model UserMfaAttempt {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique @map("user_id")
  attempts  Int       @map("attempts")
  updatedAt DateTime? @map("updated_at") @db.Timestamptz(6)
  user      User?     @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)

  @@map("user_mfa_attempt")
  @@schema("public")
}

model UserPasswordReset {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  token     String?   @unique @db.Text
  createdAt DateTime? @map("created_at") @db.Timestamptz(6)
  isUsed    Boolean?  @map("is_used")
  isValid   Boolean?  @map("is_valid")

  @@map("user_password_reset")
  @@schema("public")
}

model UserRolesAdvisor {
  id           Int        @id @default(autoincrement())
  userId       Int        @map("user_id")
  advisorId    Int        @map("advisor_id")
  accessRoleId Int        @map("access_role_id")
  isTemp       Boolean    @default(false) @map("is_temp")
  createdAt    DateTime?  @default(now()) @map("created_at") @db.Timestamp(6)
  sessionId    String     @default(dbgenerated("0")) @map("session_id")
  accessRole   AccessRole @relation(fields: [accessRoleId], references: [accessRoleId], onDelete: NoAction, onUpdate: NoAction, map: "user_roles_advisor_access_role_access_role_id_fk")
  advisor      Advisor    @relation(fields: [advisorId], references: [advisorId], onDelete: NoAction, onUpdate: NoAction, map: "user_roles_advisor_advisor_advisor_id_fk")
  user         User       @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "user_roles_advisor_user_user_id_fk")

  @@unique([userId, advisorId, accessRoleId], map: "no_duplicate_user_roles_advisor")
  @@index([accessRoleId])
  @@map("user_roles_advisor")
  @@schema("public")
}

model UserRolesEntity {
  id           Int        @id @default(autoincrement())
  userId       Int        @map("user_id")
  accessRoleId Int        @map("access_role_id")
  entityType   String     @map("entity_type") @db.Char(30)
  entityId     Int        @map("entity_id")
  createdAt    DateTime?  @default(now()) @map("created_at") @db.Timestamp(6)
  accessRole   AccessRole @relation(fields: [accessRoleId], references: [accessRoleId], onDelete: Cascade, onUpdate: NoAction, map: "user_roles_entity_access_role_access_role_id_fk")
  user         User       @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction, map: "user_roles_entity_user_user_iZd_fk")

  @@unique([userId, entityId, accessRoleId], map: "no_duplicate_user_roles_entity")
  @@unique([accessRoleId, entityType, entityId])
  @@map("user_roles_entity")
  @@schema("public")
}model UserRolesParticipant {
  id            Int         @id @default(autoincrement())
  participantId Int         @map("participant_id")
  accessRoleId  Int         @map("access_role_id")
  userId        Int         @map("user_id")
  isTemp        Boolean?    @default(false) @map("is_temp")
  createdAt     DateTime?   @default(now()) @map("created_at") @db.Timestamp(6)
  sessionId     String      @default(dbgenerated("0")) @map("session_id")
  accessRole    AccessRole  @relation(fields: [accessRoleId], references: [accessRoleId], onDelete: Cascade, onUpdate: NoAction, map: "user_roles_participant_access_role_access_role_id_fk")
  participant   Participant @relation(fields: [participantId], references: [participantId], onDelete: Cascade, onUpdate: NoAction, map: "user_roles_participant_participant_participant_id_fk")
  user          User        @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction, map: "user_roles_participant_user_user_id_fk")

  @@unique([userId, participantId, accessRoleId], map: "no_duplicate_user_roles_participant")
  @@index([accessRoleId])
  @@index([participantId, accessRoleId], map: "user_roles_participant_participantId_access_role_id_index")
  @@map("user_roles_participant")
  @@schema("public")
}

model UserRolesSponsor {
  id           Int        @id @default(autoincrement())
  sponsorId    Int        @map("sponsor_id")
  accessRoleId Int        @map("access_role_id")
  userId       Int        @map("user_id")
  isTemp       Boolean?   @default(false) @map("is_temp")
  createdAt    DateTime?  @default(now()) @map("created_at") @db.Timestamp(6)
  sessionId    String     @default(dbgenerated("0")) @map("session_id")
  accessRole   AccessRole @relation(fields: [accessRoleId], references: [accessRoleId], onDelete: Cascade, onUpdate: NoAction, map: "user_roles_sponsor_access_role_access_role_id_fk")
  sponsor      Sponsor    @relation(fields: [sponsorId], references: [sponsorId], onDelete: Cascade, onUpdate: NoAction, map: "user_roles_sponsor_sponsor_sponsor_id_fk")
  user         User       @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction, map: "user_roles_sponsor_user_user_id_fk")

  @@unique([userId, sponsorId, accessRoleId], map: "no_duplicate_user_roles_sponsor")
  @@index([accessRoleId])
  @@map("user_roles_sponsor")
  @@schema("public")
}

model UserSession {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique @map("user_id")
  sessionId String?   @map("session_id") @db.Text
  createdAt DateTime? @map("created_at") @db.Timestamptz(6)
  user      User?     @relation(fields: [userId], references: [userId], map: "user_session_user_id_fkey")

  @@map("user_session")
  @@schema("public")
}

enum AddressType {
  physical
  mailing

  @@schema("public")
}




enum RecordkeeperPlatform {
  DST
  Omni
  Proprietary
  Relius
  Surpas

  @@schema("public")
}

enum StatefulSchemaStatus {
  completed_manually
  completed_successfully
  completed_unsuccessfully
  in_progress
  needs_attention
  new
  ongoing

  @@schema("public")
}


enum WhitelabelEntities {
  advisor
  firm

  @@schema("email")
}